{"version":3,"sources":["components/header/index.tsx","routes/home/index.tsx","routes/profile/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","Component","Home","Profile","state","time","Date","now","count","timer","updateTime","_this","setState","increment","this","window","setInterval","clearInterval","props","user","toLocaleString","onClick","App","id","header_Header","react_router","render","_ref","location","TransitionGroup","CSSTransition","timeout","classNames","key","exact","path","component","profile_Profile","_ref2","match","params","Boolean","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAIqBA,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAT,MACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,iBAAT,iBAR0BC,cCDfC,0LAEjB,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,gDAL0BI,cCQbE,oNACZC,MAAQ,CACbC,KAAMC,KAAKC,MACXC,MAAO,MAGFC,eAcAC,WAAa,WAClBC,EAAKC,SAAS,CAAEP,KAAMC,KAAKC,WAGtBM,UAAY,WACjBF,EAAKC,SAAS,CAAEJ,MAAOG,EAAKP,MAAMI,MAAQ,wFAd1CM,KAAKL,MAAQM,OAAOC,YAAYF,KAAKJ,WAAY,oDAKjDO,cAAcH,KAAKL,wCAYnB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,sBAAciB,KAAKI,MAAMC,MACzBxB,EAAAC,EAAAC,cAAA,sDAA8CiB,KAAKI,MAAMC,KAAzD,KAEAxB,EAAAC,EAAAC,cAAA,4BAAoB,IAAIS,KAAKQ,KAAKV,MAAMC,MAAMe,kBAE9CzB,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,UAAQwB,QAASP,KAAKD,WAAtB,YADF,WAC6D,IAC1DC,KAAKV,MAAMI,MAFd,mBAnC6BP,cCyCtBqB,EAxCO,WACpB,OACE3B,EAAAC,EAAAC,cAAA,OAAK0B,GAAG,OACN5B,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACEC,OAAQ,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SACT,OACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACEC,QAAS,IACTC,WAAW,OACXC,IAAKL,EAASK,KAEdtC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAQG,SAAUA,GAChBjC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjCP,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACES,OAAK,EACLC,KAAK,YACLC,UAAW,kBAAMzC,EAAAC,EAAAC,cAACwC,EAAD,CAASlB,KAAK,UAEjCxB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACEU,KAAK,iBACLC,UAAW,SAAAE,GAAA,IACTC,EADSD,EACTC,MADS,OAGT5C,EAAAC,EAAAC,cAACwC,EAAD,CAASlB,KAAMoB,EAAMC,OAAOrB,mBC1BhCsB,QACW,cAA7B1B,OAAOa,SAASc,UAEe,UAA7B3B,OAAOa,SAASc,UAEhB3B,OAAOa,SAASc,SAASH,MACvB,2DCZNI,IAASjB,OAAO/B,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.52efb7a8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './style.css';\n\nexport default class Header extends Component {\n  public render() {\n    return (\n      <header className=\"header\">\n        <h1>Preact App</h1>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/profile\">Me</Link>\n          <Link to=\"/profile/john\">John</Link>\n        </nav>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './style.css';\n\nexport default class Home extends Component {\n  public render() {\n    return (\n      <div className=\"home\">\n        <h1>Home</h1>\n        <p>This is the Home component.</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './style.css';\n\ninterface Props {\n  user: string;\n}\n\ninterface State {\n  time: number;\n  count: number;\n}\nexport default class Profile extends Component<Props, State> {\n  public state = {\n    time: Date.now(),\n    count: 10,\n  };\n\n  public timer?: number;\n\n  // gets called when this route is navigated to\n  public componentDidMount() {\n    // start a timer for the clock:\n    this.timer = window.setInterval(this.updateTime, 1000);\n  }\n\n  // gets called just before navigating away from the route\n  public componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  // update the current time\n  public updateTime = () => {\n    this.setState({ time: Date.now() });\n  };\n\n  public increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n  public render() {\n    return (\n      <div className=\"profile\">\n        <h1>Profile: {this.props.user}</h1>\n        <p>This is the user profile for a user named {this.props.user}.</p>\n\n        <div>Current time: {new Date(this.state.time).toLocaleString()}</div>\n\n        <p>\n          <button onClick={this.increment}>Click Me</button> Clicked{' '}\n          {this.state.count} times.\n        </p>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport Header from './components/header';\nimport Home from './routes/home';\nimport Profile from './routes/profile';\n\nconst App: React.FC = () => {\n  return (\n    <div id=\"app\">\n      <Router>\n        <Header />\n        <Route\n          render={({ location }) => {\n            return (\n              <TransitionGroup>\n                <CSSTransition\n                  timeout={6000}\n                  classNames=\"page\"\n                  key={location.key}\n                >\n                  <Switch location={location}>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route\n                      exact\n                      path=\"/profile/\"\n                      component={() => <Profile user=\"me\" />}\n                    />\n                    <Route\n                      path=\"/profile/:user\"\n                      component={({\n                        match,\n                      }: RouteComponentProps<{ user: string }>) => (\n                        <Profile user={match.params.user} />\n                      )}\n                    />\n                  </Switch>\n                </CSSTransition>\n              </TransitionGroup>\n            );\n          }}\n        />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}